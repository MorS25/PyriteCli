using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CuberLib;

namespace Cuber
{
    class Program
    {
        static void Main(string[] args)
        {
			// Hacking in hard coded path to test with until I have 
			// a chance to build a proper CLI app.
			// Note: This will probably only work well with OBJ files generated by Pix4D
			// as I have only supported the subset of data types it outputs.
			string path = @"H:\aerialdata\tiling\testfarm2_simplified_3d_mesh.obj";

			// Parse and load the object
			Obj obj = new Obj();
			obj.LoadObj(path, ShowLinesLoaded);

			// Write out a bit of info about the object
			Console.WriteLine("Loaded {0} vertices and {1} faces", obj.VertexList.Count(), obj.FaceList.Count());
			Console.WriteLine("Size: X {0} Y {1} Z {2}", obj.Size.XSize, obj.Size.YSize, obj.Size.ZSize);
			Console.WriteLine("Memory Used: " + GC.GetTotalMemory(true) / 1024 / 1024 + "mb");

			// Generate some tiles, we are ignoring Z all the way through the 
			// stack right now.  In our OBJ files Z is a vector towards the center of the earth.
			for (int x = 0; x < 40; x++)
			{
				for (int y = 0; y < 40; y++)
				{
					obj.WriteObjGridTile(string.Format("H:\\aerialdata\\tiling\\output_{0}_{1}_0.obj", x, y), 40, 40, x, y);
				}
			}

			Console.WriteLine("Complete");
            Console.ReadKey();
        }

		// Action to show incremental file loading status
        public static void ShowLinesLoaded(int lines)
        {
            Console.SetCursorPosition(0, 10);
            Console.Write("Loaded {0} lines             ", lines);
            Console.SetCursorPosition(0, 0);
        }
    }
}
